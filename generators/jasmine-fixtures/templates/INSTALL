Jasmine Fixtures have been installed!

We copied the required files into your spec directory.
In its default configuration, Jasmine and RSpec should pick these files up.

Usage:
  1) Visit a route with your controller action
  2) Make sure it's successful
  3) save_fixture with the response you want and the name of the fixture

  Note:
    html_for will take the <body> tag and replace it with a <div>
    to avoid nested <body> tags within the Jasmine runner
    If you have custom responses (ajax partials, JSON, etc),
    you can use response.body or whatever is appropriate.

Here's an example controller spec:

require 'spec_helper'

describe UsersController do
  render_views # required for the response body to be rendered

  describe "user signup jasmine fixture generator" do
    it "generates a new user signup page" do
      get :new
      response.should be_success
      save_fixture(html_for('body'), 'user-signup-page')
    end
  end
end


Here is an example of how you might use the fixtures in your jasmine tests:

describe('User pages', function () {
  describe('the signup page', function() {
    it('looks correct', function() {
      spec.loadFixture('user-signup-page');
      expect($("#some_id")).toExist();
    });
  });

  describe('user signup success page load over ajax', function() {
    it('inserts the returned content into the page', function() {
      spec.loadFixture('user-signup-page');
      var fixtureData = spec.readFixture('user-success-ajax-response');
      doSomethingInvolvingAnAjaxCallThatReceivesHTML();
      $.ajax.mostRecentCall.args[0].success(fixtureData);
      expect($("#some_id_in_the_ajax_response")).toExist();
      expect(somethingExcitingToHaveHappened()).toBeTruthy();
    });
  });
});
